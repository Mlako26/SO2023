1.
a) Rafagas de CPU: 0-3, 11-14, 21-23
   Rafagas de E/S: 3-11, 14-21
b) Siendo t la unidad de medida de tiempo en este sistema, las rafagas del cpu duraron en orden 3m, 3m y 2m, y las de E/S duraron 8m y 7m.

2.
a. Round robin otorga a todos los procesos un quantum equitativo, y al no tener prioridades cada proceso viene despues del siguiente sin repetirse. Es decir, se forma una especie de loop entre los diferentes procesos y consiguen la misma cantidad de tiempo en el CPU. Como P0 tiene rafagas cortas de E/S a ciertos dispositivos, constantemente va a estar haciendo cosas con el CPU pero por rafagas muy pequeñas. Por otro lado, P1 será salteado bastante seguido por el algoritmo de round robin al estar bloqueado, mientras que P2 ocuparia por mucho tiempo el CPU durante su rafaga con lo cual muy probablemente sea cortado por el scheduler seguido, y aumentara el waiting time.

En este caso, seria mejor un esquema de prioridades, donde los procesos P0 y P1 tengan mayor prioridad que el P2. De este modo, el proceso P0 que necesita de varias rafacas cortas de CPU entre E/S las recibe seguido, al igual que P1, mientras que P2 recibe el CPU de vez en cuando pero

no se????

3.
Si con blocked significa que esta esperando entrada y salida, entonces es un round robin normal? Ah no pero pasa de running a blocked siempre? Es un first come first served, donde el proceso que se esta ejecutando actualmente o termina o se blockea por entrada/salida. De ese modo, al finalizar la entrada salida queda en estado ready hasta que lo dejen volver a ejecutar.

4.
a. Ya que en round robin todos tienen la misma prioridad y reciben el mismo quantum, no existe starvation (todos recibiran eventualmente el CPU).
b. Se puede producir starvation si constantemente llegan procesos de alta prioridad o todos los de alta prioridad no finalizan nunca. 
c. Se puede producir starvation si constantemente llegan procesos de corta duracion, en ese caso los procesos de larga duracion nunca llegaran a tener tiempo de CPU.
d. Lo mismo que en C.
e. Se puede producir starvation si un proceso nunca termina y no devuelve el CPU.
f. Se puede producir starvation de la misma forma que en B.
e. En este caso no se produce starvation, ya que se le puede subir la prioridad a los procesos mas viejos y eventualmente se ejecutaran.

5.
a. Basicamente se le estaria dando mas tiempo por segundo de procesador a los procesos repetidos.
b. Como ventajas, los procesos que esten cerca de terminar con un quantum mas terminarian y disminuiria el waiting time. Tambien, procesos intensivos en rafagas de CPU y E/S lograrian llegar a su estado de blocked mas seguido y no acumular waiting time.
Como desventajas, los procesos con poca utilizacion del CPU y frecuentes E/S, como los interactivos, sufririan de potencialmente tener menos tiempo de CPU y aumentar el waiting time. Esos procesos deberian de potencialmente ser los mas repetidos en el round robin para disminuir el waiting time (constantemente requieren del procesador pero pueden dejarlo libre por unos quantums).

c. Como modificacion, podemos agregar prioridades, que es basicamente lo mismo. Es decir, se pueden ejecutar los procesos que queremos repetir mas seguidos con una prioridad alta, y luego los procesos con largas E/S y rafagas de CPU menos seguido pero mas tiempo.

6.

FCFS

          10   13       19
|----------|-|--|-|-----|  P1-P2-P3-P4-P5
0            11   14

SJF

  1    4                19
|-|-|--|-----|----------|  P2-P4-P3-P5-P1
0   2        9

Prioridades sin desalojo

  1               16    19
|-|-----|----------|--|-|  P2-P5-P1-P3-P4
0       6            18

Round-robin

          5
|-|-|-|-|-|-|-|-|-|-|-|-|  P1-P2-P3-P4-P5-P1-P3-P5-P1-P5....-P1-P1-P1
0         

waiting time P1 = 0 + 4 + 2 + 1 + 1 + 1 = 9
waiting time P2 = 1
waiting time P4 = 3
waiting time P3 = 2 + 3 = 5
waiting time P5 = 4 + 2 + 1 + 1 + 1 = 9

b.

FCFS: Waiting time promedio: (0 + 10 + 11 + 13 + 14) / 5 = 9.6 milisec
      Turnaround   promedio: (10 + 11 + 13 + 14 + 19) / 5 = 13.4 milisec

SJF: Waiting time promedio: (0 + 1 + 2 + 4 + 9) / 5 = 3.2 milisec
     Turnaround   promedio: (1 + 2 + 4 + 9 + 19) / 5 = 7 milisec

Prioridades: Waiting time promedio: (0 + 1 + 6 + 16 + 18) / 5 = 8.2 milisec
             Turnaround   promedio: (1 + 6 + 16 + 18 + 19) / 5 = 12 milisec

Round-Robin: Waiting time promedio: (9 + 1 + 3 + 5 + 9) / 5 = 5.4 milisec
             Turnaround   promedio: (19 + 2 + 4 + 7 + 14) / 5 = 9.2 milisec

c. El algoritmo que tiene menor waiting time es el shortest job first, al igual que el turnaround (lo cual tiene sentido ya que turnaround es waiting time + execute time + I/O time).

El segundo mejor vendria a ser round robin.

7.

a.

waiting time: (0 + 7 + 0 + 9 + 0) / 5 = 3.2 milisec
turnaround: (3 + 13 + 4 + 14 + 2) / 5 = 7.2 milisec

b.

Primero observemos que claramente no es un FCFS, ya que se desalojan procesos sin haber terminado como el P2, ni un round-robin ya que el size del quantum difiere.

Debe de ser un Shortest remaining job first, ya que primero, cuando esta solo el 1 se ejcuta solo. Luego, cuando llega el 2 a la mitad de la ejecucion del 1, no se ejecuta todavia ya que es una tarea mas larga. Luego, comienza la 2 pero llega la 3, que tiene el mismo size, asi que se desaloja la 2 y corre la 3. Como la 3 pasa a tener menor duracion, se finaliza. Durante la 3 tambien llega la 4, pero como es de size 5 va a ser ejecutada luego de la 2 y luego de la 3. Al finalizar la 3 llega la 5, la cual es la mas corta de las tres tareas restantes, asi que se ejecuta primero, luego la 2 y luego la 4.

8.

a. turnaround: (8 + 4 + 7.6 + 7 + 4 + 1) / 3 = 10.53 milisec
b. turnaround: (8 + 7 + 1 + 8.6 + 4) / 3 = 9.53
c. turnaround: (1 + 1 + 4 + 8 + 0.6 + 1 + 4 + 1) / 3 = 6.83

9.
FCFS

  6            17
|-|----------|-|----------|  P1-P2-P3-P4
5           16            27

Waiting time: (0 + 0 + 9 + 9) / 4 = 4.5 milisec

RR (q = 10)

igual

SJF

igual

10.

a.

      5         13        21      27
|-----|-----|---|---|-----|-----|-|
0           10      16         26

P1-P2-P1-P2-P3-P4-P3

turnaround: (8 + 5 + 8 + 5 + 7 + 6 + 5 + 6) / 4 = 12.5

b.

         8              21
|--------|--------|-----|------|
0                 16           27

P1-P2-P4-P3

turnaround: (8 + 3 + 8 + 1 + 5 + 7 + 6) / 4 = 9.5

d.

Si estamos hablando de procesos interactivos, por ejemplo, estos tienen rafagas de CPU cortas con lo cual serian priorizados por el scheduler con SRTF, pero luego los procesos batch nunca se ejecutarian. Tambien, para los procesos realtime, de ser tales que requieren de uso intensivo del CPU, no seran considerados por el scheduler SRJF si llegasen constantemente trabajos pequeños.

11.
 
a.

  1   3   5   7              20
|-|-|-|-|-|-|-|--------|-----|
0   2   4   6          15

P1-P2-P1-P2-P1-P2-P1-P3-P4

b.

waiting time: (3 + 3 + 7 + 5) / 4 = 5.5
turnaround: (3 + 3 + 7 + 5 + 4 + 3 + 8 + 5) / 4 = 9.5

12.

Por un lado, favoreceria a los procesos que realizan muchas E/S ya que significa que sus rafagas de CPU son mas cortas o utilizan el CPU de vez en cuando solamente, y por ende utilizan una menor cantidad de tiempo de procesador en el pasado reciente.
Por otro lado, como favorece los procesos que tienen mucha E/S y desfavorece a los CPU intensivos, uno pensaria que existiria riesgo de starvation, pero al favorecer a los intensivos en E/S va a dejar a todos ellos bloqueados y va a haber rafagas de CPU destinadas para los procesos intensivos.

13.

a.

El algoritmo de FCFS o FIFO no favorece a ningun trabajo. Esa el la mismisima premisa del algoritmo de scheduling, en el cual el trabajo que llega es el trabajo que se procesa, en ese orden. En ese sentido, desfavorece a los trabajos de duracion corta, y es que aumenta muchisimo el wait time de los mismos si tienen que esperar a otros trabajos mas CPU intensivos.

b.

El algoritmo favorece a los trabajos mas cortos en el sentido en que reduce drasticamente su waiting time. Esto es porque, de haber un quantum adecuado, se cortan antes los procesos que toman mucho tiempo en CPU y se les da el escenario a los cortos. De terminar en ese mismo quantum, por ejemplo, se ahorrarian esperar a que terminase por completo esa tarea larga o si hubiesen mas mejor. De haber 4 tareas largas que llegaron antes que una corta, en FIFO esperaria a terminar las 4 largas, mientras que en roundrobin potencialmente solo 4 quantums.

c.

El algoritmo puede favorecer como desfavorecer a los trabajos cortos. Si estos fuesen realtime o interactivos, con pocas rafagas de CPU y quizas mas E/S, el multilevel feedback queue los prioriza y los ejecuta mas seguido. Mientras que, de ser un proceso relativamente corto de poca prioridad, quizas tarde mas en ejecutarse con respecto a los anteriores. De todos modos, al ser con feedback, estos procesos son capaces de subir su prioridad segun sus tiempos de rafagas de CPU, con lo cual no es tan malo.

14.

15.

Datos:
- Hay procesos interactivos y procesamiento de datos.
- Proc de data: Largos E/S, cortas rafagas de CPU muy de vez en cuando.
- Interactivos: Muchos E/S y rafagas de CPU cortas.
- Puedo elegir entre FCFS o RR

Queremos que los procesos interactivos estén constantemente en ejecución para que de la sensación de continuidad para los usuarios, siempre y cuando minimicemos el throughput (ready time + running time + I/O time) para todos los procesos.

De elegir FCFS, los procesos se ejecutan en orden de llegada y no se corta su ejecución hasta comenzar su E/S o finalizarse. Entonces, los procesos interactivos estarán constantemente ejecutandose, aunque tendrían ráfagas de CPU cortas, y cuando terminen su E/S las tareas de procesamiento de datos, tendrán el CPU en no mucho tiempo, conseguirán terminar sus cuentas no muy largas, y volveran a realizar otra E/S larga. Ya que el enunciado nos asegura que las cuentas son pequeñas, podemos asumir que estas tareas no interactivas ejecutandose no cortarían la continuidad visual para los usuarios.

Por otro lado, de escoger una política con Round-Robin, podría darse el caso en el que estos procesos no interactivos no terminen sus cuentas en el quantum determinado, y por ende extenderían el throughput (más waiting time). De extender el quantum para que contenga las cuentas de estos procesos en su totalidad, los procesos interactivos también serán capaces de terminar en el plazo de ese quantum alargado (si suponemos que los procesos interactivos utilizan poca CPU a la vez), y con lo cual la politica de scheduling sería lo mismo que un FCFS.

Entonces, elegiría una política de FCFS para este caso.

16.

